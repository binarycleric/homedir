#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
This is a package management system designed to work around packages
for the homedirectory.  The code is based upon ideas from GNU Stow.

HomeDir - manage the installation of packages for a user's homedir
Copyright (C) 2004-2006 by Christian HÃ¶ltje

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
"""
import os, sys, traceback

sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), '.homedir', 'lib'))

## TODO
## * unmergeSubDir
## * detect conflicts from other packages (this might be done...)
## * copy the homedir.control into ~/.homedir/installed to allow the user
##   to know what was installed.  Note: it should work whether this info
##   is accurate or not

VERSION="0.2"
IGNORE_DIRS=('.svn','CVS','RCS','.git')
STANDARDSVERSION = 1
COMMANDS = None # this is set below
HOME = os.path.expanduser("~/") # easy way to do it
HOMEDIR = os.path.expanduser("~/.homedir")
HOMEDIRCONFIG = os.path.join(HOMEDIR,"config")

###
### Version Check
###
if sys.version_info < (2,5):
    print >> sys.stderr, """

This program requires python 2.5.  You're running python %s.

Please update your python.

If you have a newer python on the system, then please run:
  % /path/to/your/newer/python %s setup

It will update your copy of homedir and fix the path to python.
""" % sys.version
    sys.exit(1)

import optparse
from homedir.package import *

# Debug Mode Helpers
DEBUG = False
def debug(*msg):
    "Either prints a debug message or is a nop, depending on options"
    if DEBUG:
        print "DEBUG: %s" % " ".join(map(str,msg))

DEBUG_FUNCTIONS = False
def fdebug(fname,locals=None):
    "print out the function call and args in a nice format"
    if DEBUG_FUNCTIONS:
        if locals:
            keys = locals.keys()
            keys.sort()
            args = " ".join(["%s==%s" % (key,locals[key]) for key in keys])
        else:
            args = ""

        print "   -> %s(%s)" % (fname, args)

# Warn mode helper
WARN = True
def warn(*msg):
    "Either prints a warning message or is a nop, depending on options"
    if WARN:
        print "WARN: %s" % " ".join(map(str,msg))

def pluralize(singular,plural,count):
    "Returns the correct form of a word, based on count"
    if count == 1:
        return singular
    elif count > 1 or count == 0:
        return plural
    else:
        raise AssertionError("Unable to pluralize")

def fixDir(dir):
    "expands variables, deals with ~/, fixes case, and removes double slashes"
    return os.path.expanduser(
        os.path.expandvars(
        os.path.normpath(
        os.path.normcase(
        dir
        ))))

def scanPackages(options):
    """Scan all the package directories, building up a list of packages
    """
    fdebug("scanPackages",locals())
    packages = options.packages = {}
    locations = options.package_locations = {}
    for topdir in options.packagedirs:
        topdir = fixDir(topdir)
        for pdir in os.listdir(topdir):
            ppath = os.path.join(topdir,pdir)
            if os.path.isdir(ppath):
                if pdir in IGNORE_DIRS:
                    continue
                try:
                    package = Package(ppath)
                except NotPackageError,err:
                    debug("Ignoring %s; %s" % (ppath,err))
                    continue
                packages[package.package] = package
                locations[package.package_location] = package

    if DEBUG:
        # Assertion - There should be no packages left that are strs
        for n,p in options.packages.items():
            if isinstance(p,str):
                raise AssertionError("%s is a string %s" % (n,p))

def lookUp(options,*names):
    """Look up one or more packages; one per string in names"""
    fdebug('lookUp',locals())
    packages = []
    bad = []
    for name in names:
        if isinstance(name,Package) and \
           options.packages.has_key(name.package):
            if name not in packages:
                packages.append(name)
        elif options.packages.has_key(name):
            p = options.packages[name]
            if p not in packages:
                packages.append(p)
        else:
            bad.append(name)
    if bad:
        if options.debug:
            raise AssertionError( "Bad Packages: %s" % ",".join(map(str,bad)))
        print >> sys.stderr, "Unknown packages: %s" % (",".join(map(str,bad)))
        sys.exit(1)
    return packages

def lookUpOne(options,name):
    "look up just one name"
    fdebug('lookUpOne',locals())
    results = lookUp(options,name)
    if results:
        return results[0]
    else:
        return None

def scanDepends(options):
    for package in options.packages.values():
        if package.depends is None:
            continue
        package.depends = [lookUpOne(options,x) for x in package.depends]

def buildPackageDepends(package,depends=None,ignore=None):
    """ARGS:
    package -- package to find dependencies for
    depends -- packages that package depends on (needed for recursion)
    ignore  -- packages to ignore (they are being taken care of elsewhere)

    Returns depends"""
    fdebug('buildPackageDepends',locals())
    if depends is None:
        depends = []
    if package.depends:
        for p in package.depends:
            if p not in depends and \
               (not ignore or p not in ignore):
                depends.append(p)
            buildPackageDepends(p,depends,ignore)
    return depends

def buildDeps(options,*packages):
    "Build up all the dependencies"
    fdebug('buildDeps',locals())

    scanDepends(options)

    allpkgs = []
    for package in packages:
        buildPackageDepends(package,allpkgs,ignore=packages)
    return allpkgs

def scanReverseDepends(options):
    for depender in options.packages.values():
        if depender.depends is None:
            dependencies = []
        else:
            dependencies = depender.depends

        # Everyone depends on homedir
        if depender.package != 'homedir' and \
           not [x for x in dependencies if x == 'homedir']:
            dependencies.append('homedir')

        for dependee in dependencies:
            dependee = lookUpOne(options,dependee)
            if dependee.reverse_depends is None:
                dependee.reverse_depends = []
            if depender not in dependee.reverse_depends:
                dependee.reverse_depends.append( depender )

def buildPackageReverseDepends(package,reverses=None,ignore=None):
    fdebug('buildPackageReverseDepends',locals())
    if reverses is None:
        reverses = []
    if package.reverse_depends:
        for p in package.reverse_depends:
            if p not in reverses and \
               (not ignore or p not in ignore):
                reverses.append(p)
            buildPackageReverseDepends(p,reverses,ignore)
    return reverses

class resolveConflict:
    counter = 0
    def __call__(package, src, dst):
        "Ask the user to resolve any conflicts"
        if not package.counter:
            print "[conflict]"
        package.counter += 1

        legit_answers = ['x','c','d','s']

        # Information about the source
        src_display = None
        if os.path.isdir(src):
            src_display = "I want to replace it with a directory"
        elif os.path.exists(src):
            src_display = "I want to replace it with a file"


        # Possible move candidate
        dstmove = "%s.bak" % dst
        if os.path.exists(dstmove):
            legit_answers.append('o')
        else:
            legit_answers.append('r')

        # Collect possible extra information
        dst_display = dst
        if os.path.isdir(dst):
            ftype = "dir"
        elif os.path.exists(dst):
            ftype = "file"
        else:
            ftype = "????"

        link_display = None
        if os.path.islink(dst):
            link_display = "The symlink points to '%s'" % os.readlink(dst)
            if os.path.exists(dst):
                link_display += " (a %s)." % ftype
                ftype = "symlink"
            else:
                ftype = "broken symlink"
                link_display += " which does not exist"

        answer = ''
        count = 0
        while answer not in legit_answers:
            count += 1
            if count > 20:
                print "...Skipping..."
                answer = 's'
                continue
            print " ","*"*40
            print "    CONFLICT: The %s '%s' is in the way." % (ftype,dst_display)
            if link_display:
                print "              %s" % link_display
            if src_display:
                print "              %s" % src_display
            print "    I can do the following:"
            print "       x - exit"
            print "       c - cancel package"
            print "       d - destroy the current file"
            print "       s - skip file"
            if 'r' in legit_answers:
                print "       r - rename '%s' to '%s'" % (dst,os.path.basename(dstmove))
            if 'o' in legit_answers:
                print "       o - rename '%s' to '%s', over-writing the existing .bak file" % (dst,os.path.basename(dstmove))
            print "    Your choice? [%s] " % "/".join(legit_answers),
            answer = sys.stdin.readline().strip().lower()

        if answer == 'x':
            print "Okay then, quitting..."
            sys.exit(0)
        elif answer == 'c':
            raise ConflictError(src=src, dst=dst)
        elif answer == 'd':
            if os.path.exists(dst):
                os.unlink(dst)
            return True
        elif answer == 's':
            return False
        elif answer == 'r':
            if os.path.exists(dstmove):
                raise ConflictError("A file has prevented backup %s"%dstmove,
                                    src=src, dst=dst)
            os.rename(dst,dstmove)
            return True
        elif answer == 'o':
            if os.path.exists(dstmove):
                os.unlink(dstmove)
            os.rename(dst,dstmove)
            return True
        else:
            raise AssertionError("The while loop should prevent this from ever happening.")
Package.conflict_resolver = resolveConflict()

def actionLoop( func, action, packages ):
    for package in packages:
        try:
            package.conflict_resolver.counter = 0
            start = "%-60s" % ("    %s %s..." % (action,package.package))
            print start,
            func(package)
            if package.conflict_resolver.counter:
                print start,
            print "[ok]"
        except ConflictError,err:
            print "[incomplete]"
            print >> sys.stderr, "There was an unresolved conflict while %s '%s' on file:" % (action,package.package)
            print >> sys.stderr, "    %s" % err

def buildRDeps(options,*packages):
    "Build up all the reverse dependencies"
    fdebug('buildRDeps',locals())

    scanReverseDepends(options)

    allpkgs = []
    for package in packages:
        buildPackageReverseDepends(package,allpkgs,ignore=packages)
    return allpkgs





def do_list(options):
    "Do the list command"
    items = options.packages.items()
    items.sort( lambda a,b: cmp(a[0],b[0]) )
    max_name = reduce(lambda prev,next: max(prev,len(next[0])), items, 0)
    template = "%%-%ds  %%s" % max_name
    for key, pkg in items:
        print template % (pkg.package,
                          pkg.short_description)
    print " %d packages" % len(options.packages.keys())

def do_install(options,*packages):
    "Do the install command"
    # lookup the packages
    packages = lookUp(options,*packages)
    print
    print "You asked me to install %s:" % pluralize('this package',
                                                    'these packages',
                                                    len(packages))
    for p in packages:
        print "    %s \t%s" % (p.package,p.short_description)

    # Do dependencies
    extra = buildDeps(options,*packages)
    if extra:
        print
        print "I need to install the following extra %s to meet dependencies:"%\
              pluralize('package','packages',len(extra))
        for p in extra:
            print "    %s \t%s" % (p.package,p.short_description)
        if not extra:
            print "    None"

        print "Is that okay? [Y/n] ",
        response = sys.stdin.readline().strip()
        if response and response[0].upper() != 'Y':
            print "Okay then, quitting..."
            sys.exit(0)
    print "Installing Packages..."
    actionLoop( lambda p:p.install(HOME), 'installing', extra+packages )

def do_remove(options,*packages):
    "Do the uninstall command"
    # lookup the packages

    packages = lookUp(options,*packages)
    print
    print "You asked me to remove %s:" % pluralize('this package',
                                                   'these packages',
                                                   len(packages))
    for p in packages:
        print "    %s \t%s" % (p.package,p.short_description)
    if not packages:
        print "    None"


    extra = buildRDeps(options,*packages)

    if extra:
        print
        print "The following %s depend on the above %s and will be" % (
              pluralize('package','packages',len(extra)),
              pluralize('package','packages',len(packages)))
        print "removed if installed:"
        for p in extra:
            print "    %s \t%s" % (p.package,p.short_description)
        print "Is that okay? [y/N] ",
        response = sys.stdin.readline().strip()
        if not response or response[0].upper() == 'N':
            print "Okay then, quitting..."
            sys.exit(0)

    print "Removing Packages..."

    actionLoop( lambda p:p.remove(HOME), 'removing', extra+packages )

def do_upgrade(options,*packages):
    packages = lookUp(options,*packages)
    print
    print "You asked me to upgrade %s:" % pluralize('this package',
                                                    'these packages',
                                                    len(packages))

    for p in packages:
        print "    %s \t%s" % (p.package,p.short_description)
    if not packages:
        print "    None"

    extra = buildDeps(options,*packages)
    reverse_deps = []
    for package in buildRDeps(options,*packages):
        # don't duplicate packages, please!
        if package not in extra:
            reverse_deps.append( package )

    if extra:
        print
        print "The following %s have dependencies that interact with " %\
              pluralize('package','packages',len(extra))
        print "the above %s and will be upgraded as well:" % pluralize(
            'package','packages',len(packages))
        for p in extra:
            print "    %s \t%s" % (p.package,p.short_description)

    if reverse_deps:
        print
        print "You might need to re-install %s" % \
              pluralize('this package','these packages',len(reverse_deps)),
        print "manually afterwards:"
        for p in reverse_deps:
            print "    %s \t%s" % (p.package,p.short_description)

    if extra or reverse_deps:
        print
        print "Is that okay? [y/N] ",
        response = sys.stdin.readline().strip()
        if not response or response[0].upper() == 'N':
            print "Okay then, quitting..."
            sys.exit(0)

    print "Updating Packages..."

    # UnInstall Only
    actionLoop( lambda p:p.remove(HOME), 'removing', reverse_deps )
    def func(package):
        package.install(HOME)
        package.remove(HOME)

    actionLoop( func, 'upgrading', extra + packages )

def do_sync(options):
    debug("executing '%s' in %s" % (options.synccmd,
                                    os.getcwd()))
    os.system( options.synccmd )


COMMANDS = {'list': do_list,
            'install': do_install,
            'remove': do_remove,
            'upgrade': do_upgrade,
            'sync': do_sync,
            }

class Application:
    "A Class to hold the core application functions."


def doParse():
    """Actually does the command line parsing.
    Returns (options, args) (as per optparse's parse_args
    """
    usage = """%prog [options] <command> arg(s)

commands:
  setup                 Install, upgrade, or configure homedir.
  install PKG ...       Install a package.
  remove PKG ...        Uninstall a package.
  upgrade PKG ...       Upgrade your installed packages (reinstall).
  list                  List all packages.
  sync                  Use synccmd to syncronize the repository."""
    parser = optparse.OptionParser(version=VERSION, usage=usage)

    parser.add_option("-c","--config",
                      action="store", dest="config",
                      default=HOMEDIRCONFIG,
                      help="User configuration file")
    parser.add_option('-q','--quiet',
                      action="store_true", dest="quiet",
                      default=False,
                      help="Run without warnings and messages. Errors are still shown.")
##     parser.add_option('-n','--dry-run',
##                       action="store_true", dest="dry_run",
##                       default=False,
##                       help="Show the actions that would have been taken, "
##                       "but don't actually do them")
    parser.add_option('-d','--debug',
                      action="store_true", dest="debug",
                      default=False,
                      help="Turn on debugging info")
    parser.add_option('-D','--debug-functions',
                      action="store_true", dest="debug_functions",
                      default=False,
                      help="Turn on debugging info")
    parser.add_option('-s','--sync',
                      action="store_true", dest="do_sync",
                      default=False,
                      help="Do a sync prior to executing a command")

    (options,args) = parser.parse_args()

    global DEBUG,DEBUG_FUNCTIONS,WARN
    DEBUG=options.debug
    DEBUG_FUNCTIONS=options.debug_functions
    WARN=options.debug

    packagedirs = options.packagedirs = []
    options.synccmd = 'echo No synccmd defined'
    # Setup the config file
    try:
        fp = file(os.path.expanduser(options.config),'r')
        num = 0
        for line in fp.readlines():
            num+=1
            line = line.strip()
            if line == '' or line.startswith('#') or line.startswith(';'):
                continue
            try:
                var,val = line.split('=',1)
            except ValueError:
                print >> sys.stderr, "%s:%d  syntax error:\n%s" % (options.config,
                                                                   num,line)
                sys.exit(1)
            var = var.strip().lower()
            val = val.strip()
            if var == 'packages':
                if os.path.isdir(fixDir(val)):
                    packagedirs.append( val )
                elif not options.quiet:
                    print >> sys.stderr, "%s:%d  " %(options.config,num) + \
                          "ignoring packages directory '%s': does not exist" % val
            elif var == 'synccmd':
                options.synccmd = os.path.expanduser(os.path.expandvars(val))
            else:
                print >> sys.stderr, "%s:%d  invalid variable: '%s'" % (options.config,
                                                                        num, var)
                sys.exit(1)
        fp.close()
        if not packagedirs:
            raise IOError("No package directives found")
    except IOError,err:
        example = [
            '# Comments begin with pound signs',
            '# You may put as many package directory lines as you want',
            'packages = ~/files/homedir/packages',
            'packages = ~/files/homedir/personal',
            ]
        if options.config == HOMEDIRCONFIG and \
           not os.path.exists(HOMEDIRCONFIG):
            # Make this to make life easier
            try:
                os.mkdir(os.path.dirname(HOMEDIRCONFIG))
            except:
                pass
            fp = file(HOMEDIRCONFIG,'w')
            fp.write("# This is the homedir config file.\n#\n")
            fp.write( "".join( ["# %s\n" % x for x in example] ) )
            fp.write( "#\n" )
            fp.close


        print >> sys.stderr, "%s: %s" % (err.args[-1],options.config)
        print >> sys.stderr, """
Example config file:
-------------------8<--------cut-------->8-------------------
%s
-------------------8<--------cut-------->8-------------------
""" % \
            "\n".join( example )
        parser.print_help()
        sys.exit(1)

    if not args:
        parser.print_help()
        sys.exit(0)
    if args[0] not in COMMANDS.keys():
        parser.error("Invalid command '%s'" % args[0])

    return options,args

if "__main__" == __name__:
    try:
        options, args = doParse()
        command = args[0]
        rest_args = args[1:]
        if options.do_sync:
            if command == 'sync':
                warn("Ignoring silly request to sync prior to doing a sync")
            else:
                do_sync(options)
        scanPackages(options)

        COMMANDS[command](options,*rest_args)
    except KeyboardInterrupt:
        print >> sys.stderr, "\nUser Aborted",
        sys.exit(1)


# Local Variables:
# mode: python
# tab-width: 4
# indent-tabs-mode: nil
# End:
# vim: set sw=4 ts=4 expandtab
